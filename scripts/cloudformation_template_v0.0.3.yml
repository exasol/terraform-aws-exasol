AWSTemplateFormatVersion: '2010-09-09'
Description: Exasol Database
Metadata:
  Images:
    regions:
      ap-east-1:
        RegionKey: apeast1
      ap-northeast-1:
        RegionKey: apnortheast1
      ap-northeast-2:
        RegionKey: apnortheast2
      ap-south-1:
        RegionKey: apsouth1
      ap-southeast-1:
        RegionKey: apsoutheast1
      ap-southeast-2:
        RegionKey: apsoutheast2
      ca-central-1:
        RegionKey: cacentral1
      eu-central-1:
        RegionKey: eucentral1
      eu-west-1:
        RegionKey: euwest1
      eu-west-2:
        RegionKey: euwest2
      eu-west-3:
        RegionKey: euwest3
      me-south-1:
        RegionKey: mesouth1
      sa-east-1:
        RegionKey: saeast1
      us-east-1:
        RegionKey: useast1
      us-east-2:
        RegionKey: useast2
      us-west-1:
        RegionKey: uswest1
      us-west-2:
        RegionKey: uswest2
      eu-north-1:
        RegionKey: eunorth1
    apeast1:
      EXASOL-6.2.3-BYOL:
        AMI: ''
      EXASOL-6.2.3-PAYG:
        AMI: ami-0de9b75e76998c385
    apnortheast1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0b737b21393f74342
      EXASOL-6.2.3-PAYG:
        AMI: ami-02d49fb9279c46956
    apnortheast2:
      EXASOL-6.2.3-BYOL:
        AMI: ami-06ed8e5cb0decfc69
      EXASOL-6.2.3-PAYG:
        AMI: ami-0183e034f3fa7414c
    apsouth1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0a4dcb6bd2a3edb12
      EXASOL-6.2.3-PAYG:
        AMI: ami-0eb5f467e032361bb
    apsoutheast1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0649e7776cf55a97b
      EXASOL-6.2.3-PAYG:
        AMI: ami-0b17d582a0804bfa4
    apsoutheast2:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0e7a58111deb12b0d
      EXASOL-6.2.3-PAYG:
        AMI: ami-00d3374eebb5e1314
    cacentral1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-01a86dbb3d723f888
      EXASOL-6.2.3-PAYG:
        AMI: ami-0c762c079adbde022
    eucentral1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0c5aeb9ef89b468b6
      EXASOL-6.2.3-PAYG:
        AMI: ami-09d192bee0de2cd67
    euwest1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0b4fe28d2b33f010c
      EXASOL-6.2.3-PAYG:
        AMI: ami-078432fa3594a8483
    euwest2:
      EXASOL-6.2.3-BYOL:
        AMI: ami-09d6d2b1ed7565b35
      EXASOL-6.2.3-PAYG:
        AMI: ami-0a5ab70ef686f6cfc
    euwest3:
      EXASOL-6.2.3-BYOL:
        AMI: ami-010539a28bfce118c
      EXASOL-6.2.3-PAYG:
        AMI: ami-0f13b2b73a6683872
    mesouth1:
      EXASOL-6.2.3-BYOL:
        AMI: ''
      EXASOL-6.2.3-PAYG:
        AMI: ami-07c0ce282384a2af4
    saeast1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-05016930a24ed1f24
      EXASOL-6.2.3-PAYG:
        AMI: ami-02ba37883a36d4ed2
    useast1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0f5cd72969284091e
      EXASOL-6.2.3-PAYG:
        AMI: ami-0f1adb5d2a09d0536
    useast2:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0cb193fea448fd3b0
      EXASOL-6.2.3-PAYG:
        AMI: ami-05d83ddd912623efc
    uswest1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-06216b2980843e285
      EXASOL-6.2.3-PAYG:
        AMI: ami-014f4a5b61206b09a
    uswest2:
      EXASOL-6.2.3-BYOL:
        AMI: ami-0e424496bc387d697
      EXASOL-6.2.3-PAYG:
        AMI: ami-047469a6fd17b4d45
    eunorth1:
      EXASOL-6.2.3-BYOL:
        AMI: ami-07034abec3e885ddb
      EXASOL-6.2.3-PAYG:
        AMI: ami-0ebc3f1538c191743
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Key Pair
        Parameters:
          - KeyName
      - Label:
          default: Default Tags
        Parameters:
          - ProjectTag
          - OwnerTag
      - Label:
          default: Exasol Database
        Parameters:
          - DBSystemName
          - DBPassword
          - ExasolPassword
      - Label:
          default: VPC/Network/Security
        Parameters:
          - SubnetId
          - PlacementGroupParam
          - PublicIP
          - CreateS3Bucket
          - CreateS3Endpoint
          - CreateKMSEndpoint
          - CreateEC2Endpoint
          - DNSServer
          - NTPServer
          - Timezone
          - SecurityGroupAccess
          - OpenPorts
          - DBSecurityGroup
      - Label:
          default: Management Server Configuration
        Parameters:
          - LicenseServerIP
          - LicenseServerInstanceType
          - ImageId
      - Label:
          default: Data Node Configuration
        Parameters:
          - FirstDataNodeIP
          - DBNodeCount
          - DatabaseNodeInstanceType
          - StandbyNode
      - Label:
          default: Data Volume Configuration per Node
        Parameters:
          - DBEBSEncryption
          - BlockDeviceVolumeSize
          - BlockDeviceCount
      - Label:
          default: License
        Parameters:
          - License
    ParameterLabels:
      ProjectTag:
        default: exa:project
      OwnerTag:
        default: exa:owner
      DatabaseNodeInstanceType:
        default: Database Node Instance Type and Storage
      DBNodeCount:
        default: Number of Data Nodes
      PlacementGroupParam:
        default: Database Placement Group (OPTIONAL)
      DBSystemName:
        default: Database Name
      DBPassword:
        default: SYS User Password
      ExasolPassword:
        default: ADMIN User Password
      KeyName:
        default: AWS Key Pair
      License:
        default: License (OPTIONAL)
      PublicIP:
        default: Public IPs
      CreateS3Bucket:
        default: S3 Bucket
      CreateS3Endpoint:
        default: Create S3 endpoint
      CreateKMSEndpoint:
        default: Create KMS endpoint
      CreateEC2Endpoint:
        default: Create EC2 endpoint
      SubnetId:
        default: Database Subnet-Id
      SecurityGroupAccess:
        default: Remote Access from distinct IP address ranges
      OpenPorts:
        default: Remote Access from defined Ports
      DBSecurityGroup:
        default: Security Group for Exasol DB
      ImageId:
        default: AMI ID
      LicenseServerInstanceType:
        default: Management Server Instance Type
      LicenseServerIP:
        default: Management Server IP (OPTIONAL)
      FirstDataNodeIP:
        default: First Data Node IP  (OPTIONAL)
      DNSServer:
        default: DNS Server
      NTPServer:
        default: NTP Server
      Timezone:
        default: System Timezone
      DBEBSEncryption:
        default: Encrypt EBS volumes
      BlockDeviceVolumeSize:
        default: Size in GB of Data Block Device Volumes
      BlockDeviceCount:
        default: Number of Data Block Device Volumes per Node
      StandbyNode:
        default: Number of Standby Node
Parameters:
  ProjectTag:
    Description: Tag exa:project for Resource Group arrangement
    Type: String
    Default: exasol
  OwnerTag:
    Description: Tag exa:owner for Resource Group arrangement
    Type: String
    Default: user@example.com
  DatabaseNodeInstanceType:
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
    Default: r5.4xlarge
    Description: Recommended instance types
    Type: String
  PublicIP:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Associate public ip addresses to all instances
    Type: String
  CreateS3Bucket:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Create s3 bucket for a default backup location
    Type: String
  CreateS3Endpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false if instances are public available or if s3 endpoint
      already exist
    Type: String
  CreateKMSEndpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false if instances are public available or if kms endpoint
      already exists
    Type: String
  CreateEC2Endpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false if instances are public available or if ec2 endpoint
      already exists
    Type: String
  StandbyNode:
    Default: 0
    Description: A standby node can automatically replace a failed node
    Type: Number
  DBNodeCount:
    Default: 3
    Description: Number of database nodes that store data and process queries (min:1,
      max:64)
    MaxValue: 64
    MinValue: 1
    Type: Number
  DBEBSEncryption:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Encrypt attached EBS volumes
    Type: String
  PlacementGroupParam:
    Default: ''
    Description: Use an existing Placement Group or leave blank for new placement
      group creation
    Type: String
  DBSystemName:
    Default: exasol
    AllowedPattern: '[a-zA-Z0-9_]{5,20}'
    ConstraintDescription: must only contain 5-20 alphanumeric characters and the
      underline character
    Description: '(Format: only lower case,  upper case, underline character, 5-20
      length)'
    MaxLength: '20'
    MinLength: '5'
    Type: String
  ExasolPassword:
    Description: 'Password for the EXAoperation system administration user ADMIN  (Format:
      lower case, upper case, digit, 8-20 length)'
    MinLength: '8'
    MaxLength: '20'
    NoEcho: true
    Type: String
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\S+$).{8,}$
    ConstraintDescription: requires one lower case letter, one upper case letter,
      one digit, 8-20 length, and no spaces
  DBPassword:
    Description: 'Password for the database administration user SYS (Format: lower
      case, upper case, digit, 8-20 length)'
    MinLength: '8'
    MaxLength: '20'
    NoEcho: true
    Type: String
    AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\S+$).{8,}$
    ConstraintDescription: requires one lower case letter, one upper case letter,
      one digit, 8-20 length, and no spaces
  KeyName:
    Description: ''
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: '1'
  License:
    Default: ''
    Description: In case of a BYOL image, an already aquired license can be pasted
      here
    Type: String
  SecurityGroupAccess:
    Default: '0.0.0.0/0'
    AllowedPattern: \d{1,3}([.]\d{1,3}){3}/\d{1,2}
    ConstraintDescription: Must be valid comma separated CIDR blocks, e.g. 0.0.0.0/0
      default route -> allow access from everywhere or 192.168.0.0/24,10.0.0.0/24
      to restrict access to specific ip ranges.
    Description: Must be valid comma separated CIDR blocks, e.g. 0.0.0.0/0 default
      route -> allow access from everywhere or 192.168.0.0/24,10.0.0.0/24 to restrict
      access to specific ip ranges.
    Type: List<String>
  OpenPorts:
    Default: 20,22,443,6583,8563,8835
    AllowedPattern: \d{1,5}([-]\d{1,5}){0,1}
    ConstraintDescription: 'Must be a valid notation of comma separated ports or port
      ranges (e.g. 2000-3000), default ports are: 22 SSH, 443 EXAOperation, 6583 BucketFS,
      8563 Exasol Database, 8835 CloudUI.'
    Description: 'Must be a valid notation of comma separated ports or port ranges
      (e.g. 2000-3000), default ports are: 22 SSH, 443 EXAOperation, 6583 BucketFS,
      8563 Exasol Database, 8835 CloudUI.'
    Type: List<String>
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    MinLength: '1'
  DBSecurityGroup:
    Description: Security Group for Exasol DB
    Type: AWS::EC2::SecurityGroup::Id
  ImageId:
    Type: String
    Description: Amazon Machine Image ID
    AllowedPattern: (?i)\b[a-z]+-[a-z0-9]+
    ConstraintDescription: must correspond to valid AMI ID
    Default: ami-09d192bee0de2cd67
  LicenseServerInstanceType:
    Default: m5.large
    Description: Management Server InstanceType
    Type: String
  LicenseServerIP:
    Type: String
    Default: ''
    Description: If left blank, then the Management Server is given an IP-Address
      with an offset of 10 from the routing prefix (an offset of at least 10 is mandatory)
  FirstDataNodeIP:
    Default: ''
    Description: If left blank, then the first Data Node is given an IP-Address with
      an offset of 1 from the Management Server IP-Address (all further Data Nodes
      IPs are counting upwards from this one)
    Type: String
  BlockDeviceVolumeSize:
    Default: 345
    Description: Size in GB per block device volume (for optimal performance >= 334GB)
    MaxValue: 16000
    Type: Number
  BlockDeviceCount:
    Default: 4
    MaxValue: 16
    MinValue: 1
    Type: Number
  DNSServer:
    Default: 169.254.169.253
    Type: String
    Description: Default Amazon DNS Server
  NTPServer:
    Default: ' 169.254.169.123'
    Type: String
    Description: Default Amazon NTP Server
  Timezone:
    AllowedValues:
      - ''
      - Africa/Abidjan
      - Africa/Accra
      - Africa/Addis_Ababa
      - Africa/Algiers
      - Africa/Asmara
      - Africa/Asmera
      - Africa/Bamako
      - Africa/Bangui
      - Africa/Banjul
      - Africa/Bissau
      - Africa/Blantyre
      - Africa/Brazzaville
      - Africa/Bujumbura
      - Africa/Cairo
      - Africa/Casablanca
      - Africa/Ceuta
      - Africa/Conakry
      - Africa/Dakar
      - Africa/Dar_es_Salaam
      - Africa/Djibouti
      - Africa/Douala
      - Africa/El_Aaiun
      - Africa/Freetown
      - Africa/Gaborone
      - Africa/Harare
      - Africa/Johannesburg
      - Africa/Juba
      - Africa/Kampala
      - Africa/Khartoum
      - Africa/Kigali
      - Africa/Kinshasa
      - Africa/Lagos
      - Africa/Libreville
      - Africa/Lome
      - Africa/Luanda
      - Africa/Lubumbashi
      - Africa/Lusaka
      - Africa/Malabo
      - Africa/Maputo
      - Africa/Maseru
      - Africa/Mbabane
      - Africa/Mogadishu
      - Africa/Monrovia
      - Africa/Nairobi
      - Africa/Ndjamena
      - Africa/Niamey
      - Africa/Nouakchott
      - Africa/Ouagadougou
      - Africa/Porto-Novo
      - Africa/Sao_Tome
      - Africa/Timbuktu
      - Africa/Tripoli
      - Africa/Tunis
      - Africa/Windhoek
      - America/Adak
      - America/Anchorage
      - America/Anguilla
      - America/Antigua
      - America/Araguaina
      - America/Argentina/Buenos_Aires
      - America/Argentina/Catamarca
      - America/Argentina/ComodRivadavia
      - America/Argentina/Cordoba
      - America/Argentina/Jujuy
      - America/Argentina/La_Rioja
      - America/Argentina/Mendoza
      - America/Argentina/Rio_Gallegos
      - America/Argentina/Salta
      - America/Argentina/San_Juan
      - America/Argentina/San_Luis
      - America/Argentina/Tucuman
      - America/Argentina/Ushuaia
      - America/Aruba
      - America/Asuncion
      - America/Atikokan
      - America/Atka
      - America/Bahia
      - America/Bahia_Banderas
      - America/Barbados
      - America/Belem
      - America/Belize
      - America/Blanc-Sablon
      - America/Boa_Vista
      - America/Bogota
      - America/Boise
      - America/Buenos_Aires
      - America/Cambridge_Bay
      - America/Campo_Grande
      - America/Cancun
      - America/Caracas
      - America/Catamarca
      - America/Cayenne
      - America/Cayman
      - America/Chicago
      - America/Chihuahua
      - America/Coral_Harbour
      - America/Cordoba
      - America/Costa_Rica
      - America/Creston
      - America/Cuiaba
      - America/Curacao
      - America/Danmarkshavn
      - America/Dawson
      - America/Dawson_Creek
      - America/Denver
      - America/Detroit
      - America/Dominica
      - America/Edmonton
      - America/Eirunepe
      - America/El_Salvador
      - America/Ensenada
      - America/Fortaleza
      - America/Fort_Nelson
      - America/Fort_Wayne
      - America/Glace_Bay
      - America/Godthab
      - America/Goose_Bay
      - America/Grand_Turk
      - America/Grenada
      - America/Guadeloupe
      - America/Guatemala
      - America/Guayaquil
      - America/Guyana
      - America/Halifax
      - America/Havana
      - America/Hermosillo
      - America/Indiana/Indianapolis
      - America/Indiana/Knox
      - America/Indiana/Marengo
      - America/Indiana/Petersburg
      - America/Indianapolis
      - America/Indiana/Tell_City
      - America/Indiana/Vevay
      - America/Indiana/Vincennes
      - America/Indiana/Winamac
      - America/Inuvik
      - America/Iqaluit
      - America/Jamaica
      - America/Jujuy
      - America/Juneau
      - America/Kentucky/Louisville
      - America/Kentucky/Monticello
      - America/Knox_IN
      - America/Kralendijk
      - America/La_Paz
      - America/Lima
      - America/Los_Angeles
      - America/Louisville
      - America/Lower_Princes
      - America/Maceio
      - America/Managua
      - America/Manaus
      - America/Marigot
      - America/Martinique
      - America/Matamoros
      - America/Mazatlan
      - America/Mendoza
      - America/Menominee
      - America/Merida
      - America/Metlakatla
      - America/Mexico_City
      - America/Miquelon
      - America/Moncton
      - America/Monterrey
      - America/Montevideo
      - America/Montreal
      - America/Montserrat
      - America/Nassau
      - America/New_York
      - America/Nipigon
      - America/Nome
      - America/Noronha
      - America/North_Dakota/Beulah
      - America/North_Dakota/Center
      - America/North_Dakota/New_Salem
      - America/Ojinaga
      - America/Panama
      - America/Pangnirtung
      - America/Paramaribo
      - America/Phoenix
      - America/Port-au-Prince
      - America/Porto_Acre
      - America/Port_of_Spain
      - America/Porto_Velho
      - America/Puerto_Rico
      - America/Rainy_River
      - America/Rankin_Inlet
      - America/Recife
      - America/Regina
      - America/Resolute
      - America/Rio_Branco
      - America/Rosario
      - America/Santa_Isabel
      - America/Santarem
      - America/Santiago
      - America/Santo_Domingo
      - America/Sao_Paulo
      - America/Scoresbysund
      - America/Shiprock
      - America/Sitka
      - America/St_Barthelemy
      - America/St_Johns
      - America/St_Kitts
      - America/St_Lucia
      - America/St_Thomas
      - America/St_Vincent
      - America/Swift_Current
      - America/Tegucigalpa
      - America/Thule
      - America/Thunder_Bay
      - America/Tijuana
      - America/Toronto
      - America/Tortola
      - America/Vancouver
      - America/Virgin
      - America/Whitehorse
      - America/Winnipeg
      - America/Yakutat
      - America/Yellowknife
      - Antarctica/Casey
      - Antarctica/Davis
      - Antarctica/DumontDUrville
      - Antarctica/Macquarie
      - Antarctica/Mawson
      - Antarctica/McMurdo
      - Antarctica/Palmer
      - Antarctica/Rothera
      - Antarctica/South_Pole
      - Antarctica/Syowa
      - Antarctica/Troll
      - Antarctica/Vostok
      - Arctic/Longyearbyen
      - Asia/Aden
      - Asia/Almaty
      - Asia/Amman
      - Asia/Anadyr
      - Asia/Aqtau
      - Asia/Aqtobe
      - Asia/Ashgabat
      - Asia/Ashkhabad
      - Asia/Baghdad
      - Asia/Bahrain
      - Asia/Baku
      - Asia/Bangkok
      - Asia/Beijing
      - Asia/Beirut
      - Asia/Bishkek
      - Asia/Brunei
      - Asia/Calcutta
      - Asia/Chita
      - Asia/Choibalsan
      - Asia/Chongqing
      - Asia/Chungking
      - Asia/Colombo
      - Asia/Dacca
      - Asia/Damascus
      - Asia/Dhaka
      - Asia/Dili
      - Asia/Dubai
      - Asia/Dushanbe
      - Asia/Gaza
      - Asia/Harbin
      - Asia/Hebron
      - Asia/Ho_Chi_Minh
      - Asia/Hong_Kong
      - Asia/Hovd
      - Asia/Irkutsk
      - Asia/Istanbul
      - Asia/Jakarta
      - Asia/Jayapura
      - Asia/Jerusalem
      - Asia/Kabul
      - Asia/Kamchatka
      - Asia/Karachi
      - Asia/Kashgar
      - Asia/Kathmandu
      - Asia/Katmandu
      - Asia/Khandyga
      - Asia/Kolkata
      - Asia/Krasnoyarsk
      - Asia/Kuala_Lumpur
      - Asia/Kuching
      - Asia/Kuwait
      - Asia/Macao
      - Asia/Macau
      - Asia/Magadan
      - Asia/Makassar
      - Asia/Manila
      - Asia/Muscat
      - Asia/Nicosia
      - Asia/Novokuznetsk
      - Asia/Novosibirsk
      - Asia/Omsk
      - Asia/Oral
      - Asia/Phnom_Penh
      - Asia/Pontianak
      - Asia/Pyongyang
      - Asia/Qatar
      - Asia/Qyzylorda
      - Asia/Rangoon
      - Asia/Riyadh
      - Asia/Saigon
      - Asia/Sakhalin
      - Asia/Samarkand
      - Asia/Seoul
      - Asia/Shanghai
      - Asia/Singapore
      - Asia/Srednekolymsk
      - Asia/Taipei
      - Asia/Tashkent
      - Asia/Tbilisi
      - Asia/Tehran
      - Asia/Tel_Aviv
      - Asia/Thimbu
      - Asia/Thimphu
      - Asia/Tokyo
      - Asia/Ujung_Pandang
      - Asia/Ulaanbaatar
      - Asia/Ulan_Bator
      - Asia/Urumqi
      - Asia/Ust-Nera
      - Asia/Vientiane
      - Asia/Vladivostok
      - Asia/Yakutsk
      - Asia/Yekaterinburg
      - Asia/Yerevan
      - Atlantic/Azores
      - Atlantic/Bermuda
      - Atlantic/Canary
      - Atlantic/Cape_Verde
      - Atlantic/Faeroe
      - Atlantic/Faroe
      - Atlantic/Jan_Mayen
      - Atlantic/Madeira
      - Atlantic/Reykjavik
      - Atlantic/South_Georgia
      - Atlantic/Stanley
      - Atlantic/St_Helena
      - Australia/ACT
      - Australia/Adelaide
      - Australia/Brisbane
      - Australia/Broken_Hill
      - Australia/Canberra
      - Australia/Currie
      - Australia/Darwin
      - Australia/Eucla
      - Australia/Hobart
      - Australia/LHI
      - Australia/Lindeman
      - Australia/Lord_Howe
      - Australia/Melbourne
      - Australia/North
      - Australia/NSW
      - Australia/Perth
      - Australia/Queensland
      - Australia/South
      - Australia/Sydney
      - Australia/Tasmania
      - Australia/Victoria
      - Australia/West
      - Australia/Yancowinna
      - Brazil/Acre
      - Brazil/DeNoronha
      - Brazil/East
      - Brazil/West
      - Canada/Atlantic
      - Canada/Central
      - Canada/Eastern
      - Canada/East-Saskatchewan
      - Canada/Mountain
      - Canada/Newfoundland
      - Canada/Pacific
      - Canada/Saskatchewan
      - Canada/Yukon
      - CET
      - Chile/Continental
      - Chile/EasterIsland
      - CST6CDT
      - Cuba
      - EET
      - Egypt
      - Eire
      - EST
      - EST5EDT
      - Etc/GMT
      - Etc/GMT0
      - Etc/GMT-12
      - Etc/GMT-11
      - Etc/GMT-10
      - Etc/GMT-9
      - Etc/GMT-8
      - Etc/GMT-7
      - Etc/GMT-6
      - Etc/GMT-5
      - Etc/GMT-4
      - Etc/GMT-3
      - Etc/GMT-2
      - Etc/GMT-1
      - Etc/GMT-0
      - Etc/GMT+0
      - Etc/GMT+1
      - Etc/GMT+2
      - Etc/GMT+3
      - Etc/GMT+4
      - Etc/GMT+5
      - Etc/GMT+6
      - Etc/GMT+7
      - Etc/GMT+8
      - Etc/GMT+9
      - Etc/GMT+10
      - Etc/GMT+11
      - Etc/GMT+12
      - Etc/GMT-13
      - Etc/GMT-14
      - Etc/Greenwich
      - Etc/UCT
      - Etc/Universal
      - Etc/UTC
      - Etc/Zulu
      - Europe/Amsterdam
      - Europe/Andorra
      - Europe/Athens
      - Europe/Belfast
      - Europe/Belgrade
      - Europe/Berlin
      - Europe/Bratislava
      - Europe/Brussels
      - Europe/Bucharest
      - Europe/Budapest
      - Europe/Busingen
      - Europe/Chisinau
      - Europe/Copenhagen
      - Europe/Dublin
      - Europe/Gibraltar
      - Europe/Guernsey
      - Europe/Helsinki
      - Europe/Isle_of_Man
      - Europe/Istanbul
      - Europe/Jersey
      - Europe/Kaliningrad
      - Europe/Kiev
      - Europe/Lisbon
      - Europe/Ljubljana
      - Europe/London
      - Europe/Luxembourg
      - Europe/Madrid
      - Europe/Malta
      - Europe/Mariehamn
      - Europe/Minsk
      - Europe/Monaco
      - Europe/Moscow
      - Europe/Nicosia
      - Europe/Oslo
      - Europe/Paris
      - Europe/Podgorica
      - Europe/Prague
      - Europe/Riga
      - Europe/Rome
      - Europe/Samara
      - Europe/San_Marino
      - Europe/Sarajevo
      - Europe/Simferopol
      - Europe/Skopje
      - Europe/Sofia
      - Europe/Stockholm
      - Europe/Tallinn
      - Europe/Tirane
      - Europe/Tiraspol
      - Europe/Uzhgorod
      - Europe/Vaduz
      - Europe/Vatican
      - Europe/Vienna
      - Europe/Vilnius
      - Europe/Volgograd
      - Europe/Warsaw
      - Europe/Zagreb
      - Europe/Zaporozhye
      - Europe/Zurich
      - Factory
      - GB
      - GB-Eire
      - GMT
      - GMT0
      - GMT-0
      - GMT+0
      - Greenwich
      - Hongkong
      - HST
      - Iceland
      - Indian/Antananarivo
      - Indian/Chagos
      - Indian/Christmas
      - Indian/Cocos
      - Indian/Comoro
      - Indian/Kerguelen
      - Indian/Mahe
      - Indian/Maldives
      - Indian/Mauritius
      - Indian/Mayotte
      - Indian/Reunion
      - Iran
      - Israel
      - Jamaica
      - Japan
      - Kwajalein
      - Libya
      - MET
      - Mexico/BajaNorte
      - Mexico/BajaSur
      - Mexico/General
      - MST
      - MST7MDT
      - Navajo
      - NZ
      - NZ-CHAT
      - Pacific/Apia
      - Pacific/Auckland
      - Pacific/Bougainville
      - Pacific/Chatham
      - Pacific/Chuuk
      - Pacific/Easter
      - Pacific/Efate
      - Pacific/Enderbury
      - Pacific/Fakaofo
      - Pacific/Fiji
      - Pacific/Funafuti
      - Pacific/Galapagos
      - Pacific/Gambier
      - Pacific/Guadalcanal
      - Pacific/Guam
      - Pacific/Honolulu
      - Pacific/Johnston
      - Pacific/Kiritimati
      - Pacific/Kosrae
      - Pacific/Kwajalein
      - Pacific/Majuro
      - Pacific/Marquesas
      - Pacific/Midway
      - Pacific/Nauru
      - Pacific/Niue
      - Pacific/Norfolk
      - Pacific/Noumea
      - Pacific/Pago_Pago
      - Pacific/Palau
      - Pacific/Pitcairn
      - Pacific/Pohnpei
      - Pacific/Ponape
      - Pacific/Port_Moresby
      - Pacific/Rarotonga
      - Pacific/Saipan
      - Pacific/Samoa
      - Pacific/Tahiti
      - Pacific/Tarawa
      - Pacific/Tongatapu
      - Pacific/Truk
      - Pacific/Wake
      - Pacific/Wallis
      - Pacific/Yap
      - Poland
      - Portugal
      - PRC
      - PST8PDT
      - ROC
      - ROK
      - Singapore
      - Turkey
      - UCT
      - Universal
      - US/Alaska
      - US/Aleutian
      - US/Arizona
      - US/Central
      - US/Eastern
      - US/East-Indiana
      - US/Hawaii
      - US/Indiana-Starke
      - US/Michigan
      - US/Mountain
      - US/Pacific
      - US/Pacific-New
      - US/Samoa
      - UTC
      - WET
      - W-SU
      - Zulu
    Default: Europe/Berlin
    Description: AWS region's timezone
    Type: String
Conditions:
  PublicIP: !Equals
    - !Ref 'PublicIP'
    - 'true'
  CreateEndpoints: !Equals
    - !Ref 'PublicIP'
    - 'false'
  PlacementGroupNotSet: !Equals
    - !Ref 'PlacementGroupParam'
    - ''
  DBEBSEncryptionNotSet: !Equals
    - !Ref 'DBEBSEncryption'
    - 'false'
  ReplicationFactorOne: !Equals
    - !Ref 'DBNodeCount'
    - 1
  CreateS3Endpoint: !Equals
    - !Ref 'CreateS3Endpoint'
    - 'true'
  CreateKMSEndpoint: !Equals
    - !Ref 'CreateKMSEndpoint'
    - 'true'
  CreateEC2Endpoint: !Equals
    - !Ref 'CreateEC2Endpoint'
    - 'true'
  CreateS3Bucket: !Equals
    - !Ref 'CreateS3Bucket'
    - 'true'
Resources:
  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Condition: PlacementGroupNotSet
    Properties:
      Strategy: cluster
  InstanceProfileDBNode:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2RoleDBNode'
  InstanceProfileManagementNode:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2RoleManagementRole'
  EC2RoleManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:RebootInstances
                  - ec2:CreateVolume
                  - ec2:DeleteVolume
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :subnet/
                      - !Ref 'SubnetId'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :network-interface/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :instance/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :volume/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ::image/
                      - !Ref 'ImageId'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :key-pair/
                      - !Ref 'KeyName'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :security-group/
                      - !Ref 'DBSecurityGroup'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :placement-group/
                      - !If
                        - PlacementGroupNotSet
                        - !Ref 'PlacementGroup'
                        - !Ref 'PlacementGroupParam'
              - Action:
                  - ec2:ModifyInstanceAttribute
                  - ec2:CreateTags
                  - ec2:ModifyVolumeAttribute
                  - ec2:ModifyVolume
                Resource: '*'
                Effect: Allow
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - :role/
                      - !Ref 'AWS::StackName'
                      - -*
              - Effect: Allow
                Action: s3:*
                Resource: !If
                  - CreateS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'S3Bucket'
                      - '*'
                  - arn:aws:s3:::dummybucket
  EC2RoleDBNode:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:RebootInstances
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :instance/*
              - Effect: Allow
                Action: s3:*
                Resource: !If
                  - CreateS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'S3Bucket'
                      - '*'
                  - arn:aws:s3:::dummybucket
  EC2Instances:
    Type: Custom::EC2Instances
    Properties:
      ServiceToken: !GetAtt 'CreateEC2InstanceLambda.Arn'
      ImageId: !Ref 'ImageId'
      BlockDeviceMappings: []
      InstanceType: ''
      IamInstanceProfile:
        Name: !Ref 'InstanceProfileDBNode'
      KeyName: !Ref 'KeyName'
      MinCount: !Ref 'DBNodeCount'
      MaxCount: !Ref 'DBNodeCount'
      NetworkInterfaces:
        - AssociatePublicIpAddress: !Ref 'PublicIP'
          Groups:
            - !Ref 'DBSecurityGroup'
          DeviceIndex: 0
          PrivateIpAddress: !GetAtt 'IpCalc.FirstDataNodeIp'
          SubnetId: !Ref 'SubnetId'
      Placement:
        GroupName: !If
          - PlacementGroupNotSet
          - !Ref 'PlacementGroup'
          - !Ref 'PlacementGroupParam'
      TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - -data_node
            - Key: exa:project
              Value: !Ref 'ProjectTag'
            - Key: exa:owner
              Value: !Ref 'OwnerTag'
      UserData: !Base64
        Fn::Base64: !Join
          - ''
          - - "mkdir -p /var/lib/exawolke/\n"
            - LICENSE='
            - !Ref 'License'
            - "'\n"
            - "if ! [[ -z ${LICENSE//} ]]; then mv /usr/opt/EXAWolke/etc/exasolution.lic\
              \ /usr/opt/EXAWolke/etc/exasolution.lic_backup; echo $LICENSE > /usr/opt/EXAWolke/etc/exasolution.lic;\
              \ fi\n"
            - FIRSTDATANODEIP='
            - !GetAtt 'IpCalc.FirstDataNodeIp'
            - "'\n"
            - LICENSE_SERVER_IP='
            - !GetAtt 'IpCalc.LicenseServerIp'
            - "'\n"
            - DBNODECOUNT='
            - !Ref 'DBNodeCount'
            - "'\n"
            - DB_STANDBY_NODES='
            - !Ref 'StandbyNode'
            - "'\n"
            - COS_NETWORK='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - "ip2int()\n"
            - "{ \n"
            - "  local a b c d\n"
            - "  { IFS=. read a b c d; } <<< $1\n"
            - "  echo $(((((((a << 8) | b) << 8) | c) << 8) | d))\n"
            - "}\n"
            - "function get_node_list {\n"
            - "DATANODE_FIRST=$(($(ip2int ${FIRSTDATANODEIP}) -$(ip2int ${COS_NETWORK%/*})))\n"
            - "DATANODE_LAST=$((DATANODE_FIRST+DBNODECOUNT-1+DB_STANDBY_NODES))\n"
            - "LICENSE_SERVER_IP_OFFSET=$(($(ip2int ${LICENSE_SERVER_IP}) -$(ip2int\
              \ ${COS_NETWORK%/*}) -10))\n"
            - "echo $(seq $DATANODE_FIRST $DATANODE_LAST | while read a; do printf\
              \ 'n%04d  ' $((a-LICENSE_SERVER_IP_OFFSET)); done)\n"
            - "}\n"
            - "ln -sf /var/lib/exawolke/cluster.conf\n"
            - "cat <<-EOF > /var/lib/exawolke/cluster.conf\n"
            - "NODES='$(get_node_list)'\n"
            - PASSWORD_DB='
            - !GetAtt 'EncryptCredentials.DBPassword'
            - "'\n"
            - PASSWORD='
            - !GetAtt 'EncryptCredentials.ExasolPassword'
            - "'\n"
            - "KMS='True'\n"
            - ST_REPLICATION_FACTOR='
            - !If
              - ReplicationFactorOne
              - 1
              - 2
            - "'\n"
            - DB_NAME='
            - !Ref 'DBSystemName'
            - "'\n"
            - DB_STANDBY_NODES='
            - !Ref 'StandbyNode'
            - "'\n"
            - DATA_EBS_ENCRYPTED='
            - !Ref 'DBEBSEncryption'
            - "'\n"
            - TIMEZONE='
            - !Ref 'Timezone'
            - "'\n"
            - DNS_SERVER_1='
            - !Ref 'DNSServer'
            - "'\n"
            - NTP_SERVER_1='
            - !Ref 'NTPServer'
            - "'\n"
            - DEFAULT_GATEWAY='
            - !GetAtt 'IpCalc.DefaultGateWay'
            - "'\n"
            - DB_RESTORE_BACKUP_SOURCE='
            - !If
              - CreateS3Bucket
              - !Join
                - ''
                - - https://
                  - !Ref 'S3Bucket'
                  - .s3.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
              - ''
            - "'\n"
            - "KERNEL_PARAMETERS=''\n"
            - NETWORK_RANGE='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - COS_NETWORK='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - "COS_NETWORK_OFFSET='0'\n"
            - LICENSE_SERVER_IP='
            - !GetAtt 'IpCalc.LicenseServerIp'
            - "'\n"
            - "LICENSE_SERVER_IP_OFFSET=$(($(ip2int ${LICENSE_SERVER_IP}) -$(ip2int\
              \ ${COS_NETWORK%/*}) -10))\n"
            - "TESTS=''\n"
            - TAG='
            - !Ref 'AWS::StackName'
            - "'\n"
            - PLACEMENT_GROUP='
            - !If
              - PlacementGroupNotSet
              - !Ref 'PlacementGroup'
              - !Ref 'PlacementGroupParam'
            - "'\n"
            - EOF
            - "\n"
            - "\n"
  CreateEC2InstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Tags:
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      Role: !GetAtt 'CreateEC2InstanceLambdaRole.Arn'
      Code:
        ZipFile: !Join
          - ''
          - - '''use strict'';'
            - const response = require('cfn-response');
            - const AWS = require('aws-sdk');
            - const regexIP = /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;
            - function toInt(ip) {return ip.split('.').map((octet, index, array) =>
              {return parseInt(octet) * Math.pow(256, (array.length - index - 1));}).reduce((prev,
              curr) => {return prev + curr;});}
            - function toIP(value) {const result = /\d+/.exec(value);value = result[0];return
              [(value>>24)&0xff, (value>>16)&0xff, (value>>8)&0xff, value&0xff].join('.');}
            - exports.handler = function(event, context) {
            - let physicalId = event.PhysicalResourceId || 'none';
            - function success(data) {
            - return response.send(event, context, response.SUCCESS, data, physicalId);
            - '}'
            - function failed(e) {
            - return response.send(event, context, response.FAILED, e, physicalId);
            - '}'
            - let ec2 = new AWS.EC2();
            - let numberOfInstances = parseInt(event.ResourceProperties.MaxCount)
              + parseInt(
            - !Ref 'StandbyNode'
            - );
            - let privateIPAddress = toInt(event.ResourceProperties.NetworkInterfaces[0].PrivateIpAddress);
            - let instanceIds = [];
            - event.ResourceProperties.MaxCount=1;
            - event.ResourceProperties.MinCount=1;
            - event.ResourceProperties.NetworkInterfaces[0].AssociatePublicIpAddress
              = (event.ResourceProperties.NetworkInterfaces[0].AssociatePublicIpAddress
              == 'true');
            - delete event.ResourceProperties.ServiceToken;
            - event.ResourceProperties.InstanceType='
            - !Ref 'DatabaseNodeInstanceType'
            - '''.split(''--'')[0];'
            - 'event.ResourceProperties.BlockDeviceMappings.push({''DeviceName'':
              ''/dev/xvdb'', ''Ebs'': { ''Encrypted'': '
            - !Ref 'DBEBSEncryption'
            - ', ''VolumeSize'': 100, ''VolumeType'': ''gp2''}});'
            - 'for (let i=1; i <= '
            - !Ref 'BlockDeviceCount'
            - ; i++) {
            - 'event.ResourceProperties.BlockDeviceMappings.push({''DeviceName'':
              ''/dev/xvd''+String.fromCharCode(i+98), ''Ebs'': { ''Encrypted'': '
            - !Ref 'DBEBSEncryption'
            - ', ''VolumeSize'': '
            - !Ref 'BlockDeviceVolumeSize'
            - ', ''VolumeType'': ''gp2''}});'
            - '}'
            - if (event.RequestType == 'Create') {
            - function createPromise(tries, ipaddress) {
            - return new Promise(function cb(resolve, reject) {
            - event.ResourceProperties.NetworkInterfaces[0].PrivateIpAddress = ipaddress;
            - ec2.runInstances(event.ResourceProperties).promise().then((data) =>
              {
            - instanceIds.push(data['Instances'][0]['InstanceId']);
            - 'ec2.describeVolumes({Filters: [{Name: ''attachment.instance-id'',  Values:
              [data[''Instances''][0][''InstanceId'']]}]}, function(err, data1) {'
            - let promisesvolumes = [];
            - data1['Volumes'].forEach(y => {
            - 'promisesvolumes.push(ec2.createTags({Resources: [ y[''VolumeId'']],
              Tags: event.ResourceProperties.TagSpecifications[0].Tags}).promise());'
            - '});'
            - Promise.all(promisesvolumes).then(_ => {
            - if (instanceIds.length == numberOfInstances) {
            - physicalId = instanceIds.join(':');
            - return resolve(instanceIds)
            - '}'
            - '}).catch((e)=> console.log(''Error create Tags: '' + e));'
            - '});'
            - '}).catch((e) => {'
            - 'console.log(''Error run Instances: '' + e);'
            - if (--tries > 0) {
            - setTimeout(function() {
            - cb(resolve, reject);
            - '}, 100);'
            - '} else {'
            - 'return reject(''Too many tries: '' + e)'
            - '}'
            - '})'
            - '});'
            - '}'
            - for (let i=0; i < numberOfInstances; i++) {
            - createPromise(10, toIP(privateIPAddress + i)).then((data) => {
            - 'return success({Instances: data});'
            - '}).catch((e) => {'
            - 'return failed({Error: ''Error during runInstance: '' + e })'
            - '});'
            - '}'
            - '} else if (event.RequestType == ''Delete'') {'
            - if (physicalId == 'none') {
            - return success({});
            - '}'
            - 'let deleteParams = {InstanceIds: physicalId.split('':'')};'
            - ec2.terminateInstances(deleteParams).promise().then((data)=>
            - ec2.waitFor('instanceTerminated', deleteParams).promise()
            - ).then((data) => success({})
            - ').catch((e) => failed({Error: e}));'
            - '} else {'
            - 'return failed({Error: ''In-place updates not supported.''});'
            - '}'
            - '};'
      Runtime: nodejs12.x
      Timeout: '300'
  MasterKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypting user data
      Tags:
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      KeyPolicy:
        Version: '2012-10-17'
        Id: User-data-key
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :role/
                  - !Ref 'EC2RoleManagementRole'
            Action:
              - kms:Decrypt
              - kms:Encrypt
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :role/
                  - !Ref 'HelperLambdaRole'
            Action:
              - kms:Encrypt
            Resource: '*'
  EncryptCredentialsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Tags:
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      Role: !GetAtt 'HelperLambdaRole.Arn'
      Code:
        ZipFile: !Join
          - ''
          - - '''use strict'';'
            - const response = require('cfn-response');
            - const AWS = require('aws-sdk');
            - const kms = new AWS.KMS();
            - exports.handler = function(event, context) {
            - '   kms.encrypt({KeyId:'''
            - !Ref 'MasterKey'
            - ''',Plaintext: event.ResourceProperties.DBPassword}, function(err, data1)
              {'
            - '      if (err) { console.log(err, err.stack); }'
            - '      kms.encrypt({KeyId:'''
            - !Ref 'MasterKey'
            - ''',Plaintext: event.ResourceProperties.ExasolPassword}, function(err,
              data2) {'
            - '         if (err) { console.log(err, err.stack); }'
            - '         return response.send(event, context, response.SUCCESS, { DBPassword:
              data1.CiphertextBlob.toString(''base64''), ExasolPassword: data2.CiphertextBlob.toString(''base64'')
              });'
            - '      });'
            - '  });'
            - '};'
      Runtime: nodejs12.x
      Timeout: '300'
  EncryptCredentials:
    Type: Custom::EncryptCredentials
    Properties:
      ServiceToken: !GetAtt 'EncryptCredentialsFunction.Arn'
      DBPassword: !Ref 'DBPassword'
      ExasolPassword: !Ref 'ExasolPassword'
  GetSubnetCidrFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Tags:
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      Role: !GetAtt 'HelperLambdaRole.Arn'
      Code:
        ZipFile: !Join
          - ''
          - - '''use strict'';'
            - const response = require('cfn-response');
            - const AWS = require('aws-sdk');
            - const ec2 = new AWS.EC2();
            - exports.handler = function(event, context) {
            - '   let params = {'
            - '       DryRun: false,'
            - '       SubnetIds: [event.ResourceProperties.SubnetId]'
            - '   };'
            - '   ec2.describeSubnets(params, function(err, data) {'
            - '       if (err) { console.log(err, err.stack);'
            - '       } else {'
            - '           ec2.describeRouteTables({Filters: [{Name: ''association.subnet-id'',
              Values: [event.ResourceProperties.SubnetId]}]}, function(err1, data1)
              {'
            - '              try {'
            - '                    return response.send(event, context, response.SUCCESS,
              { CidrBlock: data.Subnets[0].CidrBlock, VpcId: data.Subnets[0].VpcId,
              RouteTableId: data1.RouteTables[0].RouteTableId });'
            - '              } catch(e) {'
            - '                 ec2.describeRouteTables({Filters: [{Name: ''vpc-id'',
              Values: [data.Subnets[0].VpcId]}]}, function(err2, data2) {'
            - '                    return response.send(event, context, response.SUCCESS,
              { CidrBlock: data.Subnets[0].CidrBlock, VpcId: data.Subnets[0].VpcId,
              RouteTableId: data2.RouteTables[0].RouteTableId });'
            - '                 });'
            - '              }'
            - '           });'
            - '       }'
            - '   });'
            - '};'
      Runtime: nodejs12.x
      Timeout: '300'
  GetSubnetCidr:
    Type: Custom::GetSubnetCidr
    Properties:
      ServiceToken: !GetAtt 'GetSubnetCidrFunction.Arn'
      SubnetId: !Ref 'SubnetId'
  IpCalcFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Tags:
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      Role: !GetAtt 'HelperLambdaRole.Arn'
      Code:
        ZipFile: !Join
          - ''
          - - '''use strict'';'
            - const response = require('cfn-response');
            - const regexIP = /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;
            - function toInt(ip) {return ip.split('.').map((octet, index, array) =>
              {return parseInt(octet) * Math.pow(256, (array.length - index - 1));}).reduce((prev,
              curr) => {return prev + curr;});}
            - function toIP(value) {const result = /\d+/.exec(value);value = result[0];return
              [(value>>24)&0xff, (value>>16)&0xff, (value>>8)&0xff, value&0xff].join('.');}
            - exports.handler = function(event, context) {
            - '       let DefaultGateWay = toIP(toInt(event.ResourceProperties.SubnetCidr)
              + 1);'
            - '       let LicenseServerIp = (event.ResourceProperties.LicenseServerIp
              == '''' || toInt(event.ResourceProperties.LicenseServerIp) < (toInt(DefaultGateWay)
              + 9)) ? toIP(toInt(event.ResourceProperties.SubnetCidr) + 10) : event.ResourceProperties.LicenseServerIp;'
            - '       let FirstDataNodeIp = (event.ResourceProperties.FirstDataNodeIp
              == '''' || toInt(event.ResourceProperties.FirstDataNodeIp) < toInt(LicenseServerIp))
              ? toIP(toInt(LicenseServerIp) + 1) : event.ResourceProperties.FirstDataNodeIp;'
            - '       return response.send(event, context, response.SUCCESS, { DefaultGateWay:
              DefaultGateWay, LicenseServerIp: LicenseServerIp, FirstDataNodeIp: FirstDataNodeIp
              });'
            - '};'
      Runtime: nodejs12.x
      Timeout: '300'
  IpCalc:
    Type: Custom::IpCalc
    Properties:
      ServiceToken: !GetAtt 'IpCalcFunction.Arn'
      SubnetCidr: !GetAtt 'GetSubnetCidr.CidrBlock'
      LicenseServerIp: !Ref 'LicenseServerIP'
      FirstDataNodeIp: !Ref 'FirstDataNodeIP'
  HelperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: !Join
                  - ''
                  - - 'arn:aws:ec2:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - :security-group/*
  CreateEC2InstanceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :subnet/
                      - !Ref 'SubnetId'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :network-interface/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :instance/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :volume/*
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ::image/
                      - !Ref 'ImageId'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :key-pair/
                      - !Ref 'KeyName'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :security-group/
                      - !Ref 'DBSecurityGroup'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :placement-group/
                      - !If
                        - PlacementGroupNotSet
                        - !Ref 'PlacementGroup'
                        - !Ref 'PlacementGroupParam'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - :role/
                      - !Ref 'AWS::StackName'
                      - -*
  LicenseServer:
    Properties:
      ImageId: !Ref 'ImageId'
      InstanceType: !Ref 'LicenseServerInstanceType'
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'InstanceProfileManagementNode'
      NetworkInterfaces:
        - AssociatePublicIpAddress: !Ref 'PublicIP'
          GroupSet:
            - !Ref 'DBSecurityGroup'
          DeviceIndex: 0
          PrivateIpAddress: !GetAtt 'IpCalc.LicenseServerIp'
          SubnetId: !Ref 'SubnetId'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -management_node
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      UserData: !Base64
        Fn::Base64: !Join
          - ''
          - - "mkdir -p /var/lib/exawolke/\n"
            - LICENSE='
            - !Ref 'License'
            - "'\n"
            - "if ! [[ -z ${LICENSE//} ]]; then mv /usr/opt/EXAWolke/etc/exasolution.lic\
              \ /usr/opt/EXAWolke/etc/exasolution.lic_backup; echo $LICENSE > /usr/opt/EXAWolke/etc/exasolution.lic;\
              \ fi\n"
            - FIRSTDATANODEIP='
            - !GetAtt 'IpCalc.FirstDataNodeIp'
            - "'\n"
            - LICENSE_SERVER_IP='
            - !GetAtt 'IpCalc.LicenseServerIp'
            - "'\n"
            - DBNODECOUNT='
            - !Ref 'DBNodeCount'
            - "'\n"
            - DB_STANDBY_NODES='
            - !Ref 'StandbyNode'
            - "'\n"
            - COS_NETWORK='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - "ip2int()\n"
            - "{ \n"
            - "  local a b c d\n"
            - "  { IFS=. read a b c d; } <<< $1\n"
            - "  echo $(((((((a << 8) | b) << 8) | c) << 8) | d))\n"
            - "}\n"
            - "function get_node_list {\n"
            - "DATANODE_FIRST=$(($(ip2int ${FIRSTDATANODEIP}) -$(ip2int ${COS_NETWORK%/*})))\n"
            - "DATANODE_LAST=$((DATANODE_FIRST+DBNODECOUNT-1+DB_STANDBY_NODES))\n"
            - "LICENSE_SERVER_IP_OFFSET=$(($(ip2int ${LICENSE_SERVER_IP}) -$(ip2int\
              \ ${COS_NETWORK%/*}) -10))\n"
            - "echo $(seq $DATANODE_FIRST $DATANODE_LAST | while read a; do printf\
              \ 'n%04d  ' $((a-LICENSE_SERVER_IP_OFFSET)); done)\n"
            - "}\n"
            - "ln -sf /var/lib/exawolke/cluster.conf\n"
            - "cat <<-EOF > /var/lib/exawolke/cluster.conf\n"
            - "NODES='$(get_node_list)'\n"
            - PASSWORD_DB='
            - !GetAtt 'EncryptCredentials.DBPassword'
            - "'\n"
            - PASSWORD='
            - !GetAtt 'EncryptCredentials.ExasolPassword'
            - "'\n"
            - "KMS='True'\n"
            - ST_REPLICATION_FACTOR='
            - !If
              - ReplicationFactorOne
              - 1
              - 2
            - "'\n"
            - DB_NAME='
            - !Ref 'DBSystemName'
            - "'\n"
            - DB_STANDBY_NODES='
            - !Ref 'StandbyNode'
            - "'\n"
            - DATA_EBS_ENCRYPTED='
            - !Ref 'DBEBSEncryption'
            - "'\n"
            - TIMEZONE='
            - !Ref 'Timezone'
            - "'\n"
            - DNS_SERVER_1='
            - !Ref 'DNSServer'
            - "'\n"
            - NTP_SERVER_1='
            - !Ref 'NTPServer'
            - "'\n"
            - DEFAULT_GATEWAY='
            - !GetAtt 'IpCalc.DefaultGateWay'
            - "'\n"
            - DB_RESTORE_BACKUP_SOURCE='
            - !If
              - CreateS3Bucket
              - !Join
                - ''
                - - https://
                  - !Ref 'S3Bucket'
                  - .s3.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
              - ''
            - "'\n"
            - "KERNEL_PARAMETERS=''\n"
            - NETWORK_RANGE='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - COS_NETWORK='
            - !GetAtt 'GetSubnetCidr.CidrBlock'
            - "'\n"
            - "COS_NETWORK_OFFSET='0'\n"
            - LICENSE_SERVER_IP='
            - !GetAtt 'IpCalc.LicenseServerIp'
            - "'\n"
            - "LICENSE_SERVER_IP_OFFSET=$(($(ip2int ${LICENSE_SERVER_IP}) -$(ip2int\
              \ ${COS_NETWORK%/*}) -10))\n"
            - "TESTS=''\n"
            - TAG='
            - !Ref 'AWS::StackName'
            - "'\n"
            - PLACEMENT_GROUP='
            - !If
              - PlacementGroupNotSet
              - !Ref 'PlacementGroup'
              - !Ref 'PlacementGroupParam'
            - "'\n"
            - EOF
            - "\n"
            - "\n"
    Type: AWS::EC2::Instance
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3Bucket
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: exa:project
          Value: !Ref 'ProjectTag'
        - Key: exa:owner
          Value: !Ref 'OwnerTag'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  KMSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateKMSEndpoint
    Properties:
      SubnetIds:
        - !Ref 'SubnetId'
      SecurityGroupIds:
        - !Ref 'DBSecurityGroup'
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .kms
      VpcId: !GetAtt 'GetSubnetCidr.VpcId'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateS3Endpoint
    Properties:
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      RouteTableIds:
        - !GetAtt 'GetSubnetCidr.RouteTableId'
      VpcId: !GetAtt 'GetSubnetCidr.VpcId'
  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateEC2Endpoint
    Properties:
      SubnetIds:
        - !Ref 'SubnetId'
      SecurityGroupIds:
        - !Ref 'DBSecurityGroup'
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ec2
      VpcId: !GetAtt 'GetSubnetCidr.VpcId'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
Outputs:
  ManagementServer:
    Value: !Ref LicenseServer
  Datanodes:
    Value: !Join [',', !GetAtt EC2Instances.Instances]
